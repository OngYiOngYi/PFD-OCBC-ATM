@page "/voice-assistant"
@using Microsoft.CognitiveServices.Speech
@using Microsoft.CognitiveServices.Speech.Audio
@using System.Text.Json.Serialization;
@using System.Diagnostics;
@using System.Text.Json;
@using System.Text;
@using Microsoft.AspNetCore.Components;

<h1>Hello User,</h1>
<p>Welcome to Chat GPT voice assistance.</p>

<p>
    <input type="text" @bind="InputValue" />
</p>

<p>
    <input type="text" @bind="OutputValue" />
</p>

@code {
    private static string? InputValue { get; set; }
    private static string? OutputValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var speechConfig = SpeechConfig.FromSubscription("158c8fb507054b52b3fcdf722b8eb650", "southeastasia");
        speechConfig.SpeechRecognitionLanguage = "en-US";

        using var audioConfig = AudioConfig.FromDefaultMicrophoneInput();
        using var speechRecognizer = new SpeechRecognizer(speechConfig, audioConfig);
        var speechRecognitionResult = await speechRecognizer.RecognizeOnceAsync();
        await OutputSpeechRecognitionResult(speechRecognitionResult);
    }

    private static async Task OutputSpeechRecognitionResult(SpeechRecognitionResult speechRecognitionResult)
    {
        switch (speechRecognitionResult.Reason)
        {
            case ResultReason.RecognizedSpeech:
                InputValue = speechRecognitionResult.Text;
                await UseChatGPT(InputValue);
                break;
            case ResultReason.NoMatch:
                OutputValue = "Speech could not be recognized.";
                break;
            case ResultReason.Canceled:
                var cancellation = CancellationDetails.FromResult(speechRecognitionResult);
                OutputValue = $"CANCELED: Reason={cancellation.Reason}";
                if (cancellation.Reason == CancellationReason.Error)
                {
                    OutputValue += $" ErrorCode={cancellation.ErrorCode}";
                    OutputValue += $" ErrorDetails={cancellation.ErrorDetails}";
                    OutputValue += " Double check the speech resource key and region.";
                }
                break;
        }
    }

    private static async Task UseChatGPT(string query)
    {
        var completionRequest = new CompletionRequest
            {
                Model = "text-davinci-003", // Ensure this model is currently available
                Prompt = query,
                MaxTokens = 120
            };

        using (var httpClient = new HttpClient())
        {
            try
            {
                var httpReq = new HttpRequestMessage(HttpMethod.Post, "https://api.openai.com/v1/completions");
                httpReq.Headers.Add("Authorization", "Bearer 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");
                var requestString = JsonSerializer.Serialize(completionRequest);
                httpReq.Content = new StringContent(requestString, Encoding.UTF8, "application/json");

                var httpResponse = await httpClient.SendAsync(httpReq);
                if (httpResponse.IsSuccessStatusCode)
                {
                    var responseString = await httpResponse.Content.ReadAsStringAsync();
                    var completionResponse = JsonSerializer.Deserialize<CompletionResponse>(responseString);
                    OutputValue = completionResponse?.Choices?.FirstOrDefault()?.Text ?? "No output from OpenAI";
                }
                else
                {
                    OutputValue = $"HTTP Request failed. Reason: {httpResponse.ReasonPhrase}";
                }
            }
            catch (Exception ex)
            {
                OutputValue = $"Error: {ex.Message}";
            }
        }

        // Optionally, speak out the result
        var config = SpeechConfig.FromSubscription("YourAzureSpeechServiceSubscriptionKey", "YourServiceRegion");
        config.SpeechSynthesisLanguage = "en-US";
        config.SpeechSynthesisVoiceName = "en-US-JennyNeural";
        using var synthesizer = new SpeechSynthesizer(config);
        await synthesizer.SpeakTextAsync(OutputValue ?? "No output to speak");
    }

    public class CompletionRequest
    {
        [JsonPropertyName("model")]
        public string? Model { get; set; }
        [JsonPropertyName("prompt")]
        public string? Prompt { get; set; }
        [JsonPropertyName("max_tokens")]
        public int? MaxTokens { get; set; }
    }

    public class CompletionResponse
    {
        [JsonPropertyName("choices")]
        public List<ChatGPTChoice>? Choices { get; set; }
    }

    [DebuggerDisplay("Text = {Text}")]
    public class ChatGPTChoice
    {
        [JsonPropertyName("text")]
        public string? Text { get; set; }
    }
//"158c8fb507054b52b3fcdf722b8eb650", "southeastasia"
//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
}
