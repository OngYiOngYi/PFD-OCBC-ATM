@page "/voice-assistant"
@using Microsoft.CognitiveServices.Speech
@using Microsoft.CognitiveServices.Speech.Audio
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization;

<h1>Hello User,</h1>
<p>Welcome to Chat GPT voice assistance.</p>

<p>
    <input type="text" @bind="InputValue" />
</p>

<p>
    <input type="text" @bind="OutputValue" />
</p>

@code {
    private string InputValue { get; set; } = string.Empty;
    private string OutputValue { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var speechConfig = SpeechConfig.FromSubscription("158c8fb507054b52b3fcdf722b8eb650", "southeastasia");
        speechConfig.SpeechRecognitionLanguage = "en-US";

        using var audioConfig = AudioConfig.FromDefaultMicrophoneInput();
        using var speechRecognizer = new SpeechRecognizer(speechConfig, audioConfig);
        var speechRecognitionResult = await speechRecognizer.RecognizeOnceAsync();
        await ProcessSpeechRecognitionResult(speechRecognitionResult);
    }

    private async Task ProcessSpeechRecognitionResult(SpeechRecognitionResult speechRecognitionResult)
    {
        if (speechRecognitionResult.Reason == ResultReason.RecognizedSpeech)
        {
            InputValue = speechRecognitionResult.Text;
            await UseChatGPT(InputValue);
        }
        else
        {
            OutputValue = "Speech could not be recognized or another error occurred.";
        }
    }

    private async Task UseChatGPT(string query)
    {
        var httpClient = new HttpClient();
        var requestBody = new
        {
            model = "gpt-3.5-turbo",
            messages = new[]
            {
                new { role = "user", content = query }
            }
        };


        var request = new HttpRequestMessage(HttpMethod.Post, "https://api.openai.com/v1/chat/completions");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", "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");
        request.Content = new StringContent(JsonSerializer.Serialize(requestBody), Encoding.UTF8, "application/json");
        try
        {
            var response = await httpClient.SendAsync(request);
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Response Body: {responseContent}"); 
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"API Call Failed: {response.StatusCode}");
                Console.WriteLine($"Error Response: {responseContent}");
                OutputValue = "Error processing your request. Please try again.";
            }
            else
            {
                var completionResponse = JsonSerializer.Deserialize<CompletionResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true // This option can help mitigate case sensitivity issues
                });

                if (completionResponse?.Choices != null && completionResponse.Choices.Any())
                {
                    OutputValue = completionResponse.Choices[0].Message?.Content ?? "No output from OpenAI.";
                }
                else
                {
                    OutputValue = "Received an unexpected response format from OpenAI.";
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
            OutputValue = "An error occurred while processing your request.";
        }
        // Speak out the result
        var config = SpeechConfig.FromSubscription("158c8fb507054b52b3fcdf722b8eb650", "southeastasia");
        config.SpeechSynthesisLanguage = "en-US";
        config.SpeechSynthesisVoiceName = "en-US-JennyNeural";
        using var synthesizer = new SpeechSynthesizer(config);
        await synthesizer.SpeakTextAsync(OutputValue);
    }

    public class CompletionResponse
    {
        public List<Choice>? Choices { get; set; }
    }

    public class Choice
    {
        [JsonPropertyName("message")]
        public Message? Message { get; set; }
    }

    public class Message
    {
        [JsonPropertyName("role")]
        public string? Role { get; set; }
        [JsonPropertyName("content")]
        public string? Content { get; set; }
    }
}
