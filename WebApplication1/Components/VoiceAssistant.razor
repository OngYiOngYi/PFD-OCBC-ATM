@using Microsoft.CognitiveServices.Speech
@using Microsoft.CognitiveServices.Speech.Audio
@using System.Text.Json.Serialization;
@using System.Diagnostics;
@using System.Text.Json;
@using System.Text;
@using Microsoft.AspNetCore.Components;
@using OpenAI_API;
@using OpenAI_API.Completions;
@using LangChain;


<h1>Hello User,</h1>
Welcome to Chat GPT voice assistance


<p>
    <input type="text" @bind="InputValue" />
</p>

<p>
    <input type="text" @bind="OutputValue" />
</p>

@code {
    
    static string? InputValue { get; set; }
    static string? OutputValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var speechConfig = SpeechConfig.FromSubscription("158c8fb507054b52b3fcdf722b8eb650", "southeastasia");
        speechConfig.SpeechRecognitionLanguage = "en-US";

        using var audioConfig = AudioConfig.FromDefaultMicrophoneInput();
        using var speechRecognizer = new SpeechRecognizer(speechConfig, audioConfig);
        var speechRecognitionResult = await speechRecognizer.RecognizeOnceAsync();
        OutputSpeechRecognitionResult(speechRecognitionResult);
    }

    static async void OutputSpeechRecognitionResult(SpeechRecognitionResult speechRecognitionResult)
    {
        switch (speechRecognitionResult.Reason)
        {
            case ResultReason.RecognizedSpeech:
                InputValue = speechRecognitionResult.Text ;
                UseChatGPT(InputValue);
                break;
            case ResultReason.NoMatch:
                InputValue = "Speech could not be recognized";
                break;
            case ResultReason.Canceled:
                var cancellation = CancellationDetails.FromResult(speechRecognitionResult);
                InputValue = "CANCELED: Reason=" + cancellation.Reason;
                if (cancellation.Reason == CancellationReason.Error)
                {
                    Console.WriteLine($"CANCELED: ErrorCode={cancellation.ErrorCode}");
                    Console.WriteLine($"CANCELED: ErrorDetails={cancellation.ErrorDetails}");
                    Console.WriteLine($"CANCELED: Double check the speech resource key and region.");
                }
                break;
        }
    }
    public static async void UseChatGPT(string query)
    {
        var openAiApiKey = "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"; // Replace with your OpenAI API key
        APIAuthentication aPIAuthentication = new APIAuthentication(openAiApiKey);
        OpenAIAPI openAiApi = new OpenAIAPI(aPIAuthentication);
        try
        {
            string prompt = "Once upon a time";
            string model = "text-davinci-003";
            int maxTokens = 50;

            var completionRequest = new CompletionRequest
            {
                Prompt = prompt,
                Model = model,
                MaxTokens = maxTokens
            };

            var completionResult = await openAiApi.Completions.CreateCompletionAsync(completionRequest);
            var generatedText = completionResult.Completions[0].Text; //completionResult.Choices[0].Text.Trim();

            Console.WriteLine("Generated text:");
            Console.WriteLine(generatedText);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        
        //string OutPutResult = "";
        //CompletionRequest completionRequest = new CompletionRequest
        //    {
                //Model = "gpt-3.5-turbo",
                //Prompt = query,
                //MaxTokens = 120
        //   };
        //CompletionResponse completionResponse = new CompletionResponse();
        //using (HttpClient httpClient = new HttpClient())
        //{
          //  var httpReq = new HttpRequestMessage(HttpMethod.Post, "https://api.openai.com/v1/engines/gpt-3.5-turbo/completions");


            //Console.WriteLine($"httpreq: {httpReq}");
            //httpReq.Headers.Add("Authorization", "Bearer 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");
           // string requestString = JsonSerializer.Serialize(completionRequest);
            //Console.WriteLine($"Request string: {requestString}");
            //httpReq.Content = new StringContent(requestString, Encoding.UTF8, "application/json");
           // Console.WriteLine($"httpReq content {httpReq.Content}");
            //using (HttpResponseMessage? httpResponse = await httpClient.SendAsync(httpReq))
            //{
                //if (httpResponse is not null)
                //{
                    //Console.WriteLine($"HTTP Response Code: {httpResponse.StatusCode}");
                    //if (httpResponse.IsSuccessStatusCode)
                    //{
                        //string responseString = await httpResponse.Content.ReadAsStringAsync();
                        //Console.WriteLine($"HTTP Response Content: {responseString}");
                        //{
                            //if (!string.IsNullOrWhiteSpace(responseString))
                            //{
                                //completionResponse = JsonSerializer.Deserialize<CompletionResponse>(responseString);
                            //}
                        //}
                    //}
                    //else
                    //{
                        // Print additional information for unsuccessful requests
                        //Console.WriteLine($"HTTP Request failed. Reason: {httpResponse.ReasonPhrase}");
                    //}
                //}
                //if (completionResponse is null)
                //{
                    //Console.WriteLine("CompletionResponse is null");
                //}
                //else if (completionResponse is not null)
                //{
                   // Console.WriteLine(completionResponse);
                    //Console.WriteLine(completionResponse.Choices?[0]);
                    //OutPutResult = completionResponse.Choices?[0]?.Text ?? "No output from OpenAI";

 //                   Console.WriteLine(OutPutResult);
   //             }

   
  //         }
    //    }

        
        //var config = SpeechConfig.FromSubscription("158c8fb507054b52b3fcdf722b8eb650", "southeastasia");

       // config.SpeechSynthesisLanguage = "en-US";
//        config.SpeechSynthesisVoiceName = "en-US-JennyNeural";
//
  //      using var synthesizer = new SpeechSynthesizer(config);

    //    await synthesizer.SpeakTextAsync(OutPutResult ?? "No output to speak");

    }


    public class CompletionRequest
    {
        [JsonPropertyName("model")]
        public string? Model
        {
            get;
            set;
        }
        [JsonPropertyName("prompt")]
        public string? Prompt
        {
            get;
            set;
        }
        [JsonPropertyName("max_tokens")]
        public int? MaxTokens
        {
            get;
            set;
        }
    }

    public class CompletionResponse
    {
        [JsonPropertyName("choices")]
        public List<ChatGPTChoice>? Choices
        {
            get;
            set;
        }
        [JsonPropertyName("usage")]
        public ChatGPTUsage? Usage
        {
            get;
            set;
        }
    }
    public class ChatGPTUsage
    {
        [JsonPropertyName("prompt_tokens")]
        public int PromptTokens
        {
            get;
            set;
        }
        [JsonPropertyName("completion_token")]
        public int CompletionTokens
        {
            get;
            set;
        }
        [JsonPropertyName("total_tokens")]
        public int TotalTokens
        {
            get;
            set;
        }
    }
    [DebuggerDisplay("Text = {Text}")]
    public class ChatGPTChoice
    {
        [JsonPropertyName("text")]
        public string? Text
        {
            get;
            set;
        }
    }
    //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
}
