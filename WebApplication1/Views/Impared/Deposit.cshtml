
@model WebApplication1.Models.User

@{
	ViewData["Title"] = "Deposit";
}

<!DOCTYPE html>
<html>
	<head>
		<title>
			Deposit
		</title>
		<style>
		.mains {
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
			height: 50vh;
			margin: 0;
		}
		.input-group {
			text-align: center;
			margin-top: 20px;
		}

		.input-group input {
			padding: 10px;
			border: 1px solid #ccc;
			border-radius: 5px;
			width: 200px;
		}

		.input-group button {
			padding: 10px 20px;
			background-color: #007bff;
			color: white;
			border: none;
			border-radius: 5px;
		}

		.success-message {
			color: green;
			font-family: 'Comfortaa', sans-serif;
		}

		.error-message {
			color: red;
			font-family: 'Comfortaa', sans-serif;
		}
		.Deposit{
			font-family: 'Comfortaa', sans-serif;
		}
		.DepositText{
			font-family: 'Comfortaa', sans-serif;
		}
		</style>
		<link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@600&family=Merriweather:wght@700&display=swap" rel="stylesheet">
	</head>
	<body>
		<div class="mains">
			<h1 class="Deposit">Deposit</h1>
			<div class="DepositText">
				Please insert amount into ATM...
			</div>

		<div>

			<form id="withdrawForm" asp-controller="Impared" asp-action="DepositAmount" method="post" onsubmit="return submitForm()">
				<textarea asp-for="Amount" id="result" type="number" name="Amount" placeholder="Enter amount" class="form-control-plaintext" required></textarea>
				<button id="start">Start</button>
				<button id="stop">Stop</button>
				<button type="submit" onclick="simulateDithdraw()">Submit</button>
			</form>
		</div>

		<script type="text/javascript">
			var startButton = document.getElementById('start');
			var stopButton = document.getElementById('stop');
			var resultElement = document.getElementById('result');

			var recognition = new webkitSpeechRecognition();

			recognition.lang = window.navigator.language;
			recognition.interimResults = true;

			startButton.addEventListener('click', () => { recognition.start(); });
			stopButton.addEventListener('click', () => { recognition.stop(); });

			recognition.addEventListener('result', (event) => {
				const result = event.results[event.results.length - 1][0].transcript;
				resultElement.textContent = result;
			});
		</script>
	</body>
</html>